//
//  Alternative UI.swift
//  TapticMusic
//
//  Created by 김준우 on 2017-05-05.
//  Copyright © 2017 Joonwoo Kim. All rights reserved.
//

import UIKit

import AVFoundation

import WatchConnectivity


class musicTableViewCell: UITableViewCell  {
    
    @IBOutlet var musicTitleTableViewLabel: UILabel!
    @IBOutlet var musicAlbumArtTableViewLabel: UILabel!
    @IBOutlet var musicAlbumArtTableViewImage: UIImageView!
    
    
    @IBOutlet weak var musicAlbumArtTableViewImageBackground: UIImageView!


}

class alternativeUI: UIViewController, UITableViewDelegate, UITableViewDataSource, UIWebViewDelegate, WCSessionDelegate {
    
    @IBOutlet var albumMiniArtTopConstraint: NSLayoutConstraint!
    @IBOutlet var musicLittleControllerView: UIView!
    @IBOutlet var musicLittleControllerViewHeight: NSLayoutConstraint!
    @IBOutlet var albumMiniArtHeight: NSLayoutConstraint!
    @IBOutlet var albumMiniArtWidth: NSLayoutConstraint!
    
    @IBOutlet var albumArtLightingWidth: NSLayoutConstraint!
    @IBOutlet var albumArtLightingHeight: NSLayoutConstraint!
    @IBOutlet var albumArtLightingTop: NSLayoutConstraint!
    
    @IBOutlet var offSetUserValue: UISlider!
    @IBOutlet var playOnWatch: UISwitch!
    
    @IBOutlet var appleWatchOptionView: UIView!
    @IBOutlet var currentlyPlayingLabel: UILabel!
    @IBOutlet var playOnWatchButton: UIButton!
    @IBOutlet var tableView: UITableView!
    
    @IBOutlet var albumArt: UIImageView!
    @IBOutlet var musicTitle:UILabel!
    @IBOutlet var mainWebView : UIView? = nil
    @IBOutlet var webView: UIWebView!
    @IBOutlet var albumArtName: UILabel!
    @IBOutlet var miniPlayerMusicTitle: UILabel!
    @IBOutlet var miniPlayerAlbumArtName: UILabel!
    @IBOutlet var backgroundAlbumArt: UIImageView!
    
    @IBOutlet var playerWebView: UIWebView!
    
    @IBOutlet var backgroundMusicBlur: UIVisualEffectView!
    @IBOutlet var RelaunchMessage: UIVisualEffectView!
    @IBOutlet var pausePlayButton: UIButton!
    @IBOutlet var pausePlayButtonTopConstraint: NSLayoutConstraint!
    @IBOutlet var pausePlayButtonHeight: NSLayoutConstraint!
    @IBOutlet var pausePlayButtonWidth: NSLayoutConstraint!
    
    var counter = 0
    
    var timer = Timer()

    
    

        var availableTapticMusics = ["gNWATpE07j8", "dISNgvVpWlo", "0rtV5esQT6I","8A2t_tAjMz8" , "NtjnO-ge6s0", "1ri7I32Auhg", "xEeFrLSkMm8", "vxl4gsvgEQY", "NMdTd9e-LEI", "nQ6czw2bvq8", "__BFUf_nJl0",  "9DwzBICPhdM", "4tBnF46ybZk", "9pdj4iJD08s"]
    
    
    var elements =  ["The Little Things",  "WHISTLE" , "OOH-AHH", "KNOCK KNOCK", "Back & Forth", "싸운날", "Spring Day", "TOKYO GIRL", "I NEED U", "Puzzle", "I'll be your man", "Not Today", "REALLY REALLY", "PLAYING WITH FIRE"]
      var availableMusicArtist = ["Big Gigantic",  "Black Pink", "TWICE","TWICE","20syl",  "볼빨간 사춘기", "BTS", "Perfume", "BTS", "BewhY", "BTOB","BTS",  "WINNER", "Black Pink"]
    
    var availableAlbumArtImage = ["The Little Things.jpg",  "WHISTLE.jpg" , "OOH-AHH.jpg", "KNOCK KNOCK.jpg", "Back & Forth.jpg", "싸운날.jpg", "Spring Day.jpg", "TOKYO GIRL.jpg", "I NEED U.jpg", "Puzzle.jpg", "I'll be your man.jpg", "Spring Day.jpg", "REALLY REALLY.jpg", "PLAYING WITH FIRE.jpg"]
    
    var availableMusics = [""]
    
    override func viewDidLoad() {
        
        
        
        _ = "video you want to search"
        
        let youtubeApi = "https://www.googleapis.com/youtube/v3/videos?part=contentDetails%2C+snippet%2C+statistics&id=AKiiekaEHhI&key={AIzaSyAopwzRMLrTT5BE1ZQ92NL7fvKMHDKH7Sw}"
        _ = NSURL(string: youtubeApi)
        
        var urlString = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=PLTDluH66q5mrDcWhGf1NWR2sYloM4XQ9n&key=AIzaSyAopwzRMLrTT5BE1ZQ92NL7fvKMHDKH7Sw"
        
        
        
        urlString = urlString.addingPercentEncoding( withAllowedCharacters: .urlQueryAllowed)!
        let targetURL = URL(string: urlString)
        let config = URLSessionConfiguration.default // Session Configuration
        let session = URLSession(configuration: config)
        // Create your request
        let task = session.dataTask(with: targetURL!) {
            
            data, response, error in
            
            
            if error != nil {
                
                print(error!.localizedDescription)
                
                
                let alert = UIAlertView(title: "alert", message: "No data.", delegate: nil, cancelButtonTitle: "OK")
                alert.show()
                
                
                
                return
                
            }
                
            else {
                
                
                
                
                
                do {
                    if let jsonResult = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions.allowFragments) as? [String : AnyObject] {
                        
                        print("Response from YouTube: \(jsonResult)")
                    }
                }
                catch {
                    print("json error: \(error)")
                }
                
            }
            
        }
        
        // Start the request
        task.resume()
        
        
        
        miniPlayerMusicTitle.text = ""
        miniPlayerAlbumArtName.text = ""
        musicTitle.alpha = 0

        let url = NSURL(string:"https://www.youtube.com/")
        _ = NSURLRequest(url:url! as URL)
        
        offSetUserValue.value = 0
        appleWatchOptionView.alpha = 0
        self.albumArt.layer.cornerRadius = 5
        
        self.albumArt.clipsToBounds = true
        RelaunchMessage.alpha = 0
        
        
        tableView.contentOffset.y = 162
                //162
        
        //webView.delegate = UIScrollViewDelegate.self as? UIWebViewDelegate
        let notificationCenter = NotificationCenter.default
        notificationCenter.addObserver(self, selector: #selector(appMovedToBackground), name: Notification.Name.UIApplicationWillResignActive, object: nil)
    
        
        
        self.offSetUserValue.alpha = 0
        self.playOnWatchButton.alpha = 0
        addParallaxToLabel(vw: musicTitle)
        addParallaxToView(vw: albumArtName)
        addParallaxToView(vw: offSetUserValue)
        addParallaxToView(vw: playOnWatchButton)
        tableView.dataSource = self as? UITableViewDataSource
        tableView.delegate = self
    }
    
    @objc func appMovedToBackground() {
        print("App moved to background!")
        showRelaunchMessage()
    }
    
    func showRelaunchMessage() {
        RelaunchMessage.alpha = 1
        timer.invalidate()
        counter = 0
        
        
        
    }
    func addParallaxToView(vw: UIView) {
        let amount = 15
        
        let horizontal = UIInterpolatingMotionEffect(keyPath: "center.x", type: .tiltAlongHorizontalAxis)
        horizontal.minimumRelativeValue = amount
        horizontal.maximumRelativeValue = -amount
        
        let vertical = UIInterpolatingMotionEffect(keyPath: "center.y", type: .tiltAlongVerticalAxis)
        vertical.minimumRelativeValue = amount
        vertical.maximumRelativeValue = -amount
        
        let group = UIMotionEffectGroup()
        group.motionEffects = [horizontal, vertical]
        vw.addMotionEffect(group)
    }
    
    func addParallaxToLabel(vw: UIView) {
        let amount = 15
        
        let horizontal = UIInterpolatingMotionEffect(keyPath: "center.x", type: .tiltAlongHorizontalAxis)
        horizontal.minimumRelativeValue = amount
        horizontal.maximumRelativeValue = -amount
        
        let vertical = UIInterpolatingMotionEffect(keyPath: "center.y", type: .tiltAlongVerticalAxis)
        vertical.minimumRelativeValue = amount
        vertical.maximumRelativeValue = -amount
        
        let group = UIMotionEffectGroup()
        group.motionEffects = [horizontal, vertical]
        vw.addMotionEffect(group)
    }
    

    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return elements.count
    }
    
    private func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
        

    }
    
    var LittleThingsMusicStrongBass = [ 66, 123, 126, 132, 190, 192, 197, 255, 258, 263, 296, 320, 324, 328, 386, 388, 394, 452, 454, 460, 467, 476, 485, 493, 500, 508, 517, 520, 526, 530, 533, 538, 542, 546, 550, 554, 584, 588, 592, 606, 607, 612, 624, 639, 640, 645, 657, 673, 674, 678, 691, 705, 707, 711, 723, 726, 731, 735, 739, 743, 747, 751, 755, 759, 763, 768, 772, 776, 780, 784, 789, 793, 797, 801, 805, 809, 813, 817, 854, 887, 900, 908, 932, 941, 953, 966, 974, 998, 1052, 1072, 1085, 1097, 1105, 1118, 1121, 1126, 1129, 1133, 1138, 1142, 1146, 1150, 1154, 1158, 1162, 1167, 1171, 1175, 1179, 1183, 1187, 1191, 1195, 1200, 1204, 1208, 1212, 1249, 1270, 1294, 1302, 1327, 1360, 1369, 1381, 1414, 1426, 1434, 1446, 1479, 1491, 1500, 1512, 1528, 1529, 1533, 1544, 1561, 1565, 1578, 1593, 1595, 1598, 1611, 1627, 1628, 1631, 1643, 1652, 1660, 1667, 1676, 1684, 1693, 1701, 1703, 1709, 1713, 1718, 1721, 1726, 1730, 1734, 1738, 1768, 1772, 1776, 1808, 1821, 1829, 1840, 1861, 1874, 1886, 1895, 1919, 1985, 1993, 2005, 2018, 2026, 2038, 2042, 2046, 2050, 2054, 2058, 2062, 2066, 2070, 2074, 2079, 2083, 2087, 2091, 2095, 2099, 2104, 2107, 2111, 2116, 2120, 2124, 2128, 2132, 2203, 2215, 2223, 2248, 2257, 2281, 2289, 2322, 2335, 2347, 2355, 2367, 2387, 2400, 867, 875, 920, 987, 1007, 1019, 1031, 1040, 1064, 1261, 1282, 1315, 1336, 1348, 1393, 1401, 1458, 1467, 1607, 1788, 1795, 1853, 1907, 1927, 1939, 1952, 1960, 1973, 2169, 2183, 2191, 2235, 2268, 2301, 2313, 2379]
    
    var LittleThingsMusicWeakBass = [559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 600, 616, 632, 649, 665, 682, 699, 715, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 833, 835, 837, 839, 863, 879, 896, 912, 925, 929, 944, 962, 978, 990, 994, 1011, 1028, 1044, 1056, 1061, 1076, 1094, 1110, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1229, 1231, 1233, 1253, 1257, 1274, 1290, 1307, 1319, 1324, 1340, 1356, 1372, 1385, 1389, 1406, 1422, 1438, 1451, 1455, 1471, 1487, 1504, 1521, 1537, 1553, 1570, 1572, 1586, 1603, 1619, 1636, 1639, 1742, 1745, 1746, 1747, 1748, 1749, 1751, 1752, 1753, 1754, 1757, 1758, 1759, 1760, 1762, 1763, 1765, 1766, 1784, 1800, 1816, 1833, 1845, 1849, 1866, 1882, 1899, 1911, 1915, 1932, 1948, 1964, 1977, 1981, 1997, 2013, 2030, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2145, 2146, 2147, 2148, 2149, 2150, 2152, 2153, 2174, 2178, 2195, 2211, 2227, 2240, 2244, 2260, 2276, 2293, 2306, 2310, 2326, 2343, 2359, 2371, 2375, 2392, 2417, 2419, 2420, 2421, 2423, 2425, 2426, 2427, 2429, 2430, 2433]
    
    
    var LittleThingsrepetitionBass = [0]
    
    
    
    
    var WhislteStrongBass = [210, 214, 219, 257, 261, 265, 304, 308, 312, 350, 354, 358, 396, 401, 404, 443, 447, 450, 490, 494, 498, 536, 540, 544, 584, 587, 591, 630, 633, 637, 676, 680, 684, 723, 726, 730, 769, 775, 780, 786, 792, 798, 804, 809, 815, 821, 827, 833, 839, 844, 850, 856, 863, 868, 874, 880, 886, 891, 897, 903, 909, 912, 914, 917, 920, 923, 926, 929, 932, 933, 935, 937, 938, 940, 941, 943, 956, 959, 963, 1002, 1006, 1010, 1049, 1052, 1056, 1095, 1099, 1103, 1119, 1125, 1130, 1142, 1146, 1149, 1189, 1193, 1196, 1236, 1240, 1243, 1286, 1290, 1306, 1329, 1333, 1337, 1375, 1379, 1383, 1421, 1425, 1429, 1469, 1472, 1476, 1515, 1520, 1526, 1532, 1538, 1543, 1549, 1555, 1561, 1567, 1572, 1578, 1584, 1589, 1595, 1601, 1608, 1614, 1620, 1626, 1631, 1638, 1643, 1649, 1655, 1658, 1660, 1663, 1666, 1669, 1672, 1675, 1678, 1680, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1691, 1701, 1705, 1709, 1736, 1748, 1752, 1756, 1795, 1799, 1803, 1841, 1845, 1849, 1911, 1917, 1922, 1928, 1933, 1939, 1945, 1951, 1957, 1963, 1969, 1974, 1980, 1986, 1992, 1998, 2004, 2010, 2016, 2022, 2028, 2033, 2039, 2045, 2051, 2053, 2056, 2059, 2062, 2065, 2068, 2071, 2074, 2075, 2077, 2078, 2079, 2081, 2082, 2083, 2084, 2085, 2086, 2088, 2098, 2102, 2106, 2109, 2114, 2120, 2126, 2133, 2138, 2144, 2148, 2152, 2159, 2168, 2173, 2179, 2185, 2191, 2195, 2199, 2202, 2208, 2214, 2220, 2226, 2232, 2237, 2241, 2245, 2253, 2255, 2258, 2260, 2263, 2266, 2268, 2271, 2274, 2277]
    var WhistleWeakBass = [  252, 274, 286, 298, 321, 332, 344, 367, 413, 425, 437, 460, 472, 507, 518, 530, 552, 560, 600, 611, 623, 647, 693, 703, 716, 740, 865, 871, 877, 883, 889, 894, 900, 906, 973, 984, 996, 1020, 1031, 1066, 1077, 1089, 1113, 1159, 1170, 1182, 1205, 1217, 1252, 1264, 1282, 1298, 1346, 1356, 1369, 1392, 1404, 1438, 1450, 1462, 1485, 1611, 1617, 1623, 1629, 1634, 1640, 1646, 1652, 1719, 1730, 1743, 1766, 1812, 1823, 1834, 1859, 1866, 2007, 2013, 2019, 2025, 2031, 2037, 2042, 2048, 2135, 2141, 2156, 2162, 2170, 2176, 2182, 2188, 2205, 2211, 2216, 2222, 2229, 2234]
    var WhislteRepeatedBass = [0]
    
    
    var OOHAHHStrongBass =  [136, 165, 199, 233, 271, 301, 305, 333, 334, 339, 369, 373, 402, 436, 470, 504, 542, 549, 559, 561, 566, 576, 582, 593, 595, 599, 604, 610, 616, 627, 629, 633, 635, 644, 650, 677, 683, 694, 696, 701, 711, 717, 728, 732, 740, 745, 751, 762, 764, 769, 780, 785, 860, 898, 965, 971, 978, 985, 998, 1005, 1016, 1032, 1039, 1045, 1053, 1066, 1079, 1130, 1164, 1197, 1235, 1242, 1252, 1254, 1259, 1269, 1275, 1286, 1288, 1292, 1303, 1309, 1320, 1321, 1326, 1337, 1343, 1370, 1377, 1387, 1389, 1394, 1404, 1410, 1421, 1423, 1427, 1438, 1444, 1455, 1457, 1461, 1472, 1478, 1506, 1652, 1658, 1675, 1692, 1703, 1708, 1710, 1712, 1715, 1717, 1725, 1742, 1752, 1760, 1770, 1776, 1787, 1793, 1810, 1812, 1816, 1827, 1833, 1844, 1846, 1850, 1855, 1861, 1867, 1878, 1880, 1884, 1894, 1901, 1912, 1928, 1935, 1945, 1947, 1952, 1962, 1968, 1979, 1981, 1985, 1996, 2002, 2013, 2015, 2019, 2030, 2036, 2194, 2312, 2328, 2330, 2334, 2345, 2352, 2362, 2364, 2368, 2380, 2385, 2396, 2398, 2402, 2413, 2419, 2447, 2453, 2464, 2466, 2470, 2481, 2486, 2497, 2499]
    var OHHAHHWeakBass = [ 407, 411, 415, 420, 424, 428, 432, 441, 445, 449, 453, 458, 462, 466, 475, 479, 483, 487, 491, 496, 500, 508, 513, 517, 521, 547, 555, 563, 572, 580, 588, 597, 606, 614, 622, 631, 640, 648, 656, 681, 690, 699, 707, 715, 724, 730, 735, 749, 758, 767, 771, 783, 792, 814, 818, 821, 824, 834, 842, 851, 864, 875, 884, 893, 909, 918, 927, 935, 943, 952, 973, 989, 1007, 1012, 1024, 1041, 1057, 1074, 1100, 1104, 1109, 1113, 1117, 1122, 1126, 1134, 1138, 1142, 1147, 1150, 1155, 1159, 1168, 1172, 1177, 1180, 1185, 1189, 1202, 1206, 1210, 1214, 1239, 1248, 1256, 1265, 1273, 1281, 1290, 1299, 1307, 1315, 1324, 1332, 1340, 1349, 1375, 1383, 1392, 1400, 1408, 1417, 1425, 1433, 1442, 1450, 1459, 1468, 1476, 1484, 1654, 1670, 1679, 1696, 1705, 1729, 1738, 1746, 1754, 1764, 1772, 1789, 1797, 1805, 1814, 1822, 1831, 1839, 1848, 1857, 1865, 1873, 1882, 1890, 1898, 1907, 1932, 1941, 1950, 1958, 1966, 1975, 1984, 1991, 2000, 2008, 2017, 2025, 2034, 2042, 2315, 2324, 2332, 2340, 2349, 2357, 2366, 2375, 2383, 2391, 2400, 2408, 2417, 2425, 2451, 2459, 2468, 2476, 2484, 2492]
    var OOHAHHRepeatedBass =  [118, 123, 127, 131, 253, 258, 262, 267, 525, 530, 534, 661, 664, 669, 673, 795, 800, 804, 1218, 1223, 1227, 1353, 1358, 1362, 1488, 1492, 1497, 2046, 2050, 2055, 2429, 2433, 2438, 2442]
    
    
    var KNOCKKNOCKStrongBass = [ 143, 151, 161, 170, 179, 188, 197, 206, 216, 225, 234, 243, 252, 257, 262, 272, 281, 290, 299, 308, 318, 327, 336, 345, 354, 363, 373, 382, 392, 401, 410, 419, 438, 442, 447, 451, 456, 461, 465, 474, 484, 493, 502, 512, 521, 530, 539, 549, 553, 585, 594, 604, 613, 622, 632, 641, 650, 659, 668, 678, 687, 696, 752, 761, 770, 779, 789, 798, 807, 816, 825, 834, 844, 853, 862, 872, 881, 890, 899, 909, 918, 926, 936, 945, 954, 963, 973, 983, 992, 1001, 1010, 1019, 1028, 1033, 1038, 1047, 1056, 1065, 1074, 1084, 1093, 1102, 1111, 1121, 1130, 1139, 1148, 1158, 1195, 1204, 1213, 1223, 1232, 1241, 1250, 1259, 1269, 1278, 1287, 1296, 1306, 1363, 1370, 1379, 1388, 1397, 1407, 1416, 1425, 1434, 1444, 1453, 1462, 1471, 1508, 1517, 1528, 1536, 1545, 1555, 1564, 1573, 1582, 1592, 1601, 1610, 1619, 1786, 1804, 1813, 1822, 1831, 1841, 1849, 1859, 1868, 1878, 1886, 1896, 1905, 1915, 1951, 1961, 1970, 1979, 1988, 1998, 2007, 2016, 2025, 2034, 2043, 2053, 2062, 2105, 2109, 2118, 2126, 2136, 2145, 2154, 2164, 2173, 2182, 2191, 2200, 2210]
    var KNOCKKNOCKWeakBass = [ 148, 156, 166, 175, 184, 193, 203, 211, 221, 230, 239, 248, 267, 276, 286, 294, 304, 313, 323, 331, 340, 350, 357, 360, 368, 377, 388, 395, 397, 406, 415, 468, 471, 479, 489, 498, 505, 507, 516, 526, 535, 544, 558, 562, 567, 570, 573, 590, 600, 609, 616, 618, 627, 636, 646, 655, 664, 673, 682, 692, 701, 705, 710, 715, 718, 722, 724, 756, 766, 774, 784, 794, 803, 812, 821, 830, 839, 848, 858, 867, 876, 885, 895, 904, 914, 922, 931, 941, 950, 959, 969, 978, 988, 996, 1005, 1015, 1024, 1034, 1043, 1052, 1061, 1070, 1077, 1079, 1089, 1098, 1107, 1114, 1116, 1125, 1135, 1144, 1154, 1163, 1167, 1172, 1176, 1180, 1183, 1190, 1199, 1209, 1218, 1227, 1236, 1246, 1255, 1264, 1273, 1283, 1292, 1299, 1301, 1310, 1315, 1319, 1324, 1328, 1331, 1334, 1338, 1366, 1374, 1384, 1391, 1393, 1402, 1411, 1421, 1428, 1430, 1439, 1448, 1458, 1465, 1467, 1475, 1478, 1483, 1486, 1490, 1494, 1497, 1503, 1513, 1522, 1532, 1541, 1550, 1560, 1569, 1575, 1578, 1587, 1596, 1606, 1612, 1615, 1624, 1627, 1631, 1634, 1638, 1641, 1645, 1649, 1652, 1657, 1808, 1818, 1827, 1834, 1836, 1845, 1855, 1864, 1871, 1873, 1882, 1891, 1901, 1910, 1919, 1924, 1933, 1936, 1940, 1956, 1965, 1975, 1981, 1984, 1993, 2002, 2012, 2021, 2030, 2039, 2048, 2058, 2069, 2072, 2076, 2080, 2084, 2088, 2091, 2113, 2122, 2131, 2141, 2150, 2159, 2169, 2178, 2187, 2196, 2203, 2205, 2214, 2218, 2223, 2228, 2232, 2235, 2241, 2243]
    var KNOCKKNOCKRepeaetedBass = [0]
    
    var backForthStrongBass = [ 189, 204, 221, 233, 237, 254, 268, 286, 319, 333, 351, 362, 365, 384, 398, 416, 427, 430, 448, 463, 481, 490, 494, 513, 515, 516, 528, 545, 556, 560, 578, 593, 610, 620, 624, 643, 645, 646, 657, 675, 686, 689, 708, 722, 741, 750, 754, 772, 786, 805, 815, 819, 837, 851, 870, 878, 886, 894, 1033, 1046, 1065, 1075, 1079, 1097, 1111, 1130, 1140, 1144, 1162, 1175, 1195, 1207, 1227, 1241, 1259, 1272, 1306, 1325, 1334, 1338, 1357, 1371, 1389, 1399, 1403, 1420, 1436, 1454, 1467, 1486, 1498, 1519, 1529, 1533, 1551, 1566, 1584, 1594, 1598, 1616, 1648, 1659, 1663, 1681, 1695, 1713, 1723, 1727]
    
    var backForthWeakBass = [ 197, 212, 229, 244, 262, 278, 295, 310, 327, 343, 360, 374, 391, 408, 425, 440, 456, 473, 489, 506, 521, 538, 554, 570, 587, 602, 619, 635, 651, 667, 684, 702, 716, 732, 748, 765, 781, 797, 813, 829, 846, 862, 910, 926, 943, 960, 975, 991, 1008, 1024, 1026, 1028, 1030, 1040, 1056, 1073, 1088, 1105, 1121, 1138, 1154, 1170, 1187, 1202, 1219, 1235, 1251, 1267, 1284, 1300, 1316, 1332, 1348, 1364, 1380, 1397, 1412, 1429, 1446, 1462, 1478, 1495, 1511, 1527, 1542, 1560, 1576, 1592, 1607, 1624, 1657, 1671, 1689, 1706, 1722, 1737]
    
    var backForthrepeatedBass = [0]
    
    var theFightDayStrongBass = [ 74, 90, 105, 121, 136, 152, 168, 183, 199, 214, 230, 246, 261, 277, 292, 308, 323, 339, 354, 370, 378, 393, 409, 424, 440, 456, 472, 488, 503, 508, 518, 522, 535, 538, 550, 553, 565, 569, 581, 585, 597, 600, 612, 616, 628, 632, 643, 647, 658, 663, 674, 678, 690, 694, 705, 710, 721, 725, 736, 740, 753, 757, 768, 772, 783, 788, 799, 803, 815, 819, 830, 834, 846, 850, 862, 866, 877, 881, 892, 908, 924, 939, 955, 971, 986, 1002, 1017, 1033, 1048, 1064, 1079, 1095, 1111, 1127, 1130, 1141, 1146, 1158, 1161, 1173, 1177, 1189, 1193, 1204, 1208, 1220, 1224, 1235, 1239, 1251, 1255, 1266, 1270, 1282, 1286, 1298, 1302, 1313, 1317, 1328, 1333, 1345, 1348, 1360, 1364, 1375, 1380, 1391, 1396, 1407, 1410, 1422, 1426, 1438, 1442, 1454, 1458, 1469, 1473, 1485, 1489, 1493, 1497, 1500, 1508, 1523, 1539, 1555, 1570, 1586, 1601, 1617, 1625, 1630, 1640, 1644, 1656, 1660, 1672, 1676, 1687, 1691, 1703, 1707, 1719, 1722, 1734, 1738, 1750, 1773, 1788, 1804, 1820, 1835, 1851, 1866]
    
    var theFightDayWeakBass = [11, 27, 43, 58, 385, 401, 417, 432, 448, 464, 480, 495, 511, 526, 542, 558, 573, 588, 604, 620, 635, 651, 666, 682, 697, 713, 729, 744, 760, 776, 791, 807, 822, 838, 854, 869, 885, 900, 916, 931, 947, 962, 978, 993, 1009, 1025, 1040, 1056, 1072, 1087, 1103, 1118, 1134, 1149, 1165, 1180, 1196, 1212, 1228, 1243, 1259, 1274, 1290, 1305, 1321, 1336, 1352, 1367, 1384, 1399, 1414, 1430, 1446, 1461, 1477, 1633, 1648, 1664, 1680, 1695, 1711, 1726, 1742, 1757]
    
    var theFightDayRepeatedBass = [0]
    
    var springDayWeakBass = [493, 504, 515, 526, 537, 549, 559, 571, 582, 593, 605, 616, 628, 639, 649, 661, 672, 684, 695, 706, 717, 728, 740, 751, 762, 773, 784, 796, 806, 817, 828, 840, 936, 945, 947, 950, 952, 955, 958, 961, 964, 967, 969, 972, 975, 977, 980, 983, 985, 989, 991, 996, 999, 1002, 1013, 1031, 1043, 1053, 1064, 1076, 1087, 1098, 1110, 1121, 1132, 1143, 1154, 1165, 1177, 1188, 1199, 1211, 1222, 1233, 1244, 1255, 1267, 1278, 1289, 1300, 1311, 1322, 1334, 1345, 1356, 1367, 1379, 1397, 1402, 1412, 1424, 1434, 1446, 1457, 1468, 1480, 1491, 1501, 1513, 1524, 1535, 1547, 1558, 1659, 1670, 1681, 1692, 1704, 1716, 1726, 1738, 1835, 1840, 1843, 1845, 1847, 1850, 1853, 1855, 1858, 1860, 1862, 1865, 1867, 1869, 1872, 1874, 1877, 1880, 1882, 1884, 1887, 1890, 1893, 1895, 1898, 1900, 1903, 1905, 1907, 1910, 1916, 1928, 1940, 1950, 1962, 1973, 1984, 1995, 2007, 2018, 2029, 2040, 2051, 2063, 2074, 2086, 2096, 2108, 2119, 2130, 2141, 2152, 2164, 2175, 2186, 2197, 2208, 2220, 2231, 2243, 2254, 2264, 2276, 2466, 2478, 2489]
    
    var springDayStrongBass = [487, 496, 509, 517, 532, 540, 545, 554, 561, 566, 576, 585, 599, 607, 613, 621, 630, 636, 643, 652, 658, 667, 675, 680, 689, 697, 703, 711, 720, 725, 733, 743, 748, 756, 764, 770, 778, 787, 792, 801, 809, 814, 823, 831, 837, 846, 1025, 1034, 1040, 1048, 1056, 1059, 1070, 1078, 1081, 1092, 1100, 1103, 1115, 1123, 1126, 1137, 1146, 1149, 1159, 1168, 1171, 1182, 1191, 1193, 1205, 1213, 1216, 1227, 1236, 1238, 1249, 1258, 1261, 1272, 1280, 1283, 1294, 1303, 1305, 1316, 1325, 1328, 1339, 1348, 1350, 1361, 1370, 1373, 1384, 1396, 1407, 1414, 1418, 1429, 1440, 1451, 1460, 1462, 1474, 1482, 1485, 1496, 1505, 1507, 1519, 1527, 1530, 1541, 1549, 1552, 1564, 1653, 1663, 1665, 1676, 1684, 1687, 1698, 1707, 1713, 1720, 1729, 1735, 1743, 1922, 1931, 1935, 1944, 1953, 1955, 1967, 1975, 1978, 1989, 1998, 2001, 2012, 2020, 2023, 2035, 2043, 2046, 2056, 2065, 2068, 2080, 2088, 2091, 2102, 2110, 2113, 2124, 2133, 2135, 2147, 2155, 2158, 2169, 2177, 2180, 2192, 2200, 2203, 2214, 2223, 2225, 2237, 2245, 2248, 2259, 2267, 2270, 2281, 2461, 2469, 2472, 2483, 2491, 2493 ]
    
    var springDayRepeatedBass = [0]
    
    
    var ToKyoGirlWeakBass = [11, 29, 48, 65, 86, 104, 123, 160, 179, 198, 216, 244, 385, 404, 422, 441, 460, 479, 498, 517, 531, 533, 536, 538, 541, 543, 546, 548, 550, 552, 554, 556, 559, 561, 564, 566, 568, 570, 573, 576, 578, 580, 583, 585, 588, 590, 592, 595, 597, 600, 602, 604, 606, 609, 611, 614, 616, 618, 620, 622, 625, 627, 629, 632, 634, 637, 639, 642, 644, 647, 648, 651, 653, 655, 658, 660, 662, 665, 667, 669, 672, 674, 756, 758, 761, 763, 766, 768, 771, 773, 775, 778, 781, 782, 784, 787, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 826, 960, 962, 965, 967, 972, 1037, 1039, 1042, 1262, 1272, 1427, 1454, 1473, 1492, 1510, 1529, 1548, 1567, 1581, 1583, 1586, 1588, 1591, 1593, 1595, 1598, 1600, 1602, 1605, 1607, 1610, 1612, 1614, 1616, 1618, 1621, 1623, 1626, 1628, 1630, 1632, 1635, 1637, 1640, 1642, 1644, 1647, 1649, 1651, 1654, 1656, 1659, 1661, 1663, 1666, 1668, 1670, 1673, 1675, 1677, 1680, 1682, 1684, 1687, 1689, 1691, 1693, 1696, 1698, 1701, 1703, 1705, 1708, 1710, 1713, 1715, 1717, 1720, 1722, 1724, 1726, 1857, 1862, 1867, 1871, 1874, 1876, 1879, 1881, 1884, 1886, 1891, 1893, 1896, 1900, 1905, 1909, 1912, 1914, 1919, 1923, 1928, 1930, 1933, 1937, 1942, 1947, 1949, 1952, 1954, 1956, 1958, 1961, 1963, 1965, 1968, 1971, 1973, 1975, 1978, 1980, 1982, 1985, 1987, 1989, 1990, 1991, 1992, 1993, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2003, 2004, 2022, 2237, 2240, 2242, 2336, 2355, 2373, 2411, 2430, 2448, 2463, 2486]
    
    var ToKyoGirlStrongBass = [1, 9, 19, 23, 26, 38, 46, 61, 75, 83, 94, 101, 113, 120, 131, 140, 150, 157, 168, 176, 188, 195, 206, 226, 375, 394, 413, 431, 450, 470, 488, 507, 511, 514, 526, 676, 681, 686, 691, 693, 695, 700, 705, 709, 712, 714, 719, 723, 728, 730, 733, 738, 742, 747, 749, 752, 754, 808, 813, 817, 819, 822, 824, 831, 836, 841, 845, 850, 854, 860, 864, 869, 873, 878, 882, 887, 892, 896, 902, 906, 911, 916, 920, 925, 929, 934, 939, 944, 948, 953, 958, 977, 982, 986, 991, 995, 1000, 1004, 1010, 1014, 1018, 1024, 1028, 1033, 1046, 1052, 1056, 1061, 1066, 1070, 1075, 1080, 1084, 1094, 1098, 1103, 1108, 1126, 1131, 1136, 1140, 1145, 1150, 1155, 1159, 1164, 1169, 1173, 1178, 1182, 1187, 1192, 1197, 1201, 1206, 1211, 1215, 1220, 1225, 1230, 1234, 1239, 1244, 1249, 1257, 1260, 1265, 1270, 1277, 1445, 1464, 1482, 1501, 1520, 1539, 1558, 1561, 1564, 1569, 1572, 1576, 1728, 1731, 1736, 1741, 1743, 1745, 1750, 1755, 1759, 1762, 1764, 1769, 1773, 1778, 1780, 1783, 1788, 1792, 1797, 1799, 1802, 1806, 1811, 1816, 1818, 1820, 1825, 1829, 1834, 1837, 1839, 1843, 1848, 1853, 1855, 2008, 2019, 2024, 2027, 2031, 2036, 2041, 2046, 2050, 2055, 2059, 2064, 2069, 2074, 2078, 2083, 2087, 2092, 2097, 2102, 2106, 2111, 2116, 2120, 2125, 2130, 2134, 2139, 2143, 2148, 2153, 2158, 2163, 2167, 2177, 2181, 2186, 2191, 2196, 2200, 2205, 2209, 2214, 2219, 2223, 2228, 2232, 2247, 2252, 2256, 2261, 2266, 2271, 2275, 2280, 2284, 2293, 2299, 2303, 2308, 2327, 2333, 2345, 2352, 2364, 2371, 2382, 2402, 2408, 2420, 2427, 2439, 2446, 2457, 2461, 2465, 2476, 2484, 2495]
    
    var ToKyoGirlRepeteadBass = [0]
    
    
    
    var INEEDYOUweakBass = [ 214, 230, 245, 260, 276, 291, 306, 321, 336, 351, 366, 381, 398, 412, 427, 442, 451, 454, 457, 461, 465, 469, 472, 476, 480, 484, 487, 491, 495, 498, 503, 506, 511, 513, 515, 516, 518, 519, 521, 523, 524, 526, 527, 529, 531, 532, 534, 535, 537, 538, 540, 541, 542, 542, 543, 544, 546, 547, 548, 549, 550, 550, 551, 552, 553, 554, 555, 556, 579, 594, 611, 625, 629, 630, 640, 655, 671, 686, 701, 716, 731, 747, 762, 776, 789, 823, 838, 853, 868, 884, 899, 912, 944, 959, 974, 990, 1005, 1020, 1035, 1050, 1066, 1081, 1095, 1111, 1126, 1142, 1157, 1179, 1183, 1187, 1191, 1195, 1199, 1202, 1206, 1210, 1214, 1218, 1221, 1225, 1229, 1233, 1237, 1240, 1242, 1244, 1246, 1247, 1249, 1251, 1252, 1254, 1256, 1257, 1259, 1261, 1263, 1264, 1266, 1267, 1268, 1270, 1270, 1271, 1272, 1273, 1274, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1281, 1282, 1283, 1284, 1285, 1286, 1286, 1309, 1323, 1328, 1339, 1355, 1370, 1385, 1400, 1415, 1430, 1446, 1460, 1476, 1491, 1506, 1551, 1566, 1581, 1597, 1612, 1628, 1642, 1658, 1670, 1688, 1700, 1718, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1764, 1766, 1767, 1767, 1768, 1769, 1770, 1771, 1771, 1810, 1825, 1840, 1856, 1871, 1886, 1901, 1917, 1936, 1947, 1967, 1977, 1992, 2008, 2053, 2068, 2083, 2099, 2114, 2129, 2141]
    var INEEDYOUStrongBass = [ 328, 567, 572, 583, 591, 603, 608, 614, 621, 644, 651, 663, 675, 681, 693, 705, 711, 724, 735, 742, 754, 765, 773, 784, 791, 815, 826, 834, 845, 857, 864, 876, 882, 888, 894, 906, 937, 947, 955, 966, 978, 985, 997, 1008, 1016, 1028, 1038, 1046, 1058, 1070, 1077, 1088, 1098, 1107, 1119, 1130, 1137, 1149, 1297, 1301, 1312, 1319, 1332, 1343, 1350, 1362, 1373, 1381, 1392, 1404, 1411, 1423, 1434, 1441, 1453, 1464, 1471, 1483, 1495, 1502, 1514, 1516, 1517, 1519, 1522, 1523, 1665, 1677, 1684, 1696, 1707, 1715, 1726, 1733, 1741, 1749, 1802, 1813, 1821, 1833, 1844, 1851, 1863, 1875, 1882, 1894, 1905, 1912, 1924, 1931, 1943, 1954, 1973, 1984, 1996, 2003, 2015, 2018, 2019, 2021, 2023, 2026, 2045, 2057, 2064, 2075, 2087, 2095, 2106, 2118, 2125, 2137]
    var INEEDYOUrepeatedBass = [ 598, 633, 659, 690, 720, 750, 780, 841, 871, 902, 921, 925, 929, 1358, 1388, 1419, 1450, 1479, 1510, 1829, 1859, 1890, 1920, 1980, 2011, 2072, 2102, 2133, 2152, 2155, 2159, 2163]
    
    
    var PuzzleWeakBass = [ 43, 45, 47, 50, 51, 52, 55, 57, 59, 61, 62, 66, 69, 71, 74, 77, 90, 111, 129, 148, 166, 187, 205, 224, 243, 262, 281, 300, 319, 339, 357, 376, 386, 389, 391, 393, 396, 398, 401, 403, 406, 408, 411, 413, 415, 418, 420, 422, 425, 427, 429, 432, 434, 437, 439, 441, 444, 446, 448, 451, 453, 455, 458, 460, 463, 465, 468, 470, 472, 475, 477, 480, 482, 484, 487, 489, 492, 494, 496, 499, 501, 503, 506, 508, 511, 513, 515, 518, 520, 522, 525, 528, 530, 532, 535, 537, 539, 541, 543, 546, 548, 551, 553, 555, 558, 560, 563, 565, 567, 570, 572, 575, 577, 579, 582, 584, 586, 588, 591, 593, 596, 598, 601, 603, 606, 608, 610, 613, 615, 617, 620, 622, 624, 627, 629, 632, 634, 636, 639, 641, 644, 646, 648, 651, 653, 656, 658, 660, 663, 665, 667, 670, 672, 674, 677, 679, 682, 684, 686, 688, 700, 719, 738, 757, 776, 795, 813, 833, 852, 871, 890, 909, 928, 947, 966, 985, 1005, 1024, 1043, 1081, 1100, 1119, 1156, 1176, 1194, 1215, 1232, 1253, 1271, 1301, 1303, 1305, 1307, 1310, 1312, 1314, 1317, 1319, 1322, 1324, 1327, 1329, 1331, 1334, 1336, 1338, 1341, 1343, 1346, 1348, 1351, 1353, 1355, 1358, 1361, 1363, 1365, 1367, 1370, 1372, 1374, 1377, 1379, 1381, 1384, 1386, 1389, 1391, 1393, 1396, 1398, 1400, 1403, 1405, 1408, 1410, 1413, 1415, 1417, 1420, 1422, 1424, 1427, 1429, 1432, 1434, 1436, 1439, 1441, 1443, 1446, 1448, 1451, 1453, 1455, 1458, 1460, 1463, 1465, 1468, 1470, 1472, 1475, 1477, 1479, 1482, 1484, 1486, 1489, 1491, 1494, 1496, 1498, 1501, 1503, 1506, 1508, 1511, 1513, 1515, 1518, 1520, 1522, 1525, 1527, 1530, 1532, 1534, 1537, 1539, 1541, 1544, 1546, 1549, 1551, 1553, 1556, 1558, 1560, 1563, 1565, 1567, 1569, 1572, 1574, 1577, 1579, 1582, 1584, 1586, 1589, 1591, 1593, 1615, 1633, 1652, 1671, 1690, 1709, 1728, 1747, 1766, 1785, 1805, 1824, 1843, 1862, 1880, 1899, 1920, 1938, 1957, 1976, 1995, 2014, 2033, 2052, 2062, 2065, 2067, 2070, 2072, 2074, 2077, 2079, 2081, 2084, 2086, 2088, 2091, 2093, 2095, 2098, 2101, 2103, 2105, 2108, 2110, 2113, 2115, 2118, 2120, 2122, 2125, 2127, 2129, 2132, 2134, 2137, 2139, 2141, 2144, 2146, 2149, 2151, 2153, 2156, 2158, 2160, 2163, 2165, 2167, 2170, 2172, 2174, 2177, 2179, 2182, 2184, 2187, 2189, 2191, 2194, 2196, 2198, 2201, 2203, 2206, 2208, 2210, 2224, 2243, 2262, 2281, 2300, 2319, 2338, 2357, 2376, 2395, 2414, 2433, 2452, 2472, 2490]
    
    var PuzzleStrongBass = [82, 95, 97, 105, 115, 117, 120, 133, 157, 171, 174, 185, 191, 194, 196, 210, 212, 222, 233, 247, 250, 259, 271, 286, 288, 298, 308, 310, 325, 326, 335, 347, 362, 364, 691, 705, 707, 713, 723, 728, 742, 745, 751, 767, 781, 783, 789, 800, 804, 819, 821, 828, 843, 856, 859, 866, 881, 895, 897, 904, 919, 933, 936, 943, 957, 972, 973, 980, 995, 1010, 1012, 1019, 1034, 1048, 1050, 1057, 1072, 1086, 1087, 1095, 1109, 1123, 1125, 1148, 1161, 1164, 1172, 1186, 1200, 1202, 1210, 1223, 1237, 1239, 1250, 1261, 1276, 1496, 1606, 1624, 1643, 1657, 1659, 1666, 1681, 1695, 1697, 1704, 1714, 1719, 1733, 1735, 1742, 1757, 1772, 1773, 1781, 1796, 1810, 1812, 1819, 1833, 1847, 1850, 1857, 1871, 1885, 1887, 1894, 1909, 1947, 1986, 2024, 2215, 2229, 2231, 2237, 2247, 2252, 2267, 2269, 2275, 2291, 2305, 2307, 2314, 2329, 2343, 2345, 2351, 2367, 2381, 2383, 2390, 2405, 2419, 2421, 2428, 2443, 2458, 2460, 2466, 2481, 2495, 2497, 1619]
    var PuzzleRepeatedBass = [1]
    
    
    var ILLBeYourManweakBass = [0, 332, 348, 363, 380, 395, 410, 424, 442, 457, 472, 487, 503, 518, 534, 549, 565, 573, 577, 581, 584, 587, 591, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 638, 642, 646, 649, 653, 657, 661, 665, 669, 673, 677, 681, 685, 689, 693, 829, 844, 859, 875, 890, 905, 920, 936, 952, 968, 983, 999, 1076, 1091, 1107, 1123, 1138, 1153, 1169, 1196, 1200, 1204, 1208, 1212, 1215, 1219, 1223, 1227, 1231, 1235, 1238, 1243, 1247, 1251, 1254, 1258, 1262, 1266, 1270, 1273, 1277, 1281, 1285, 1289, 1293, 1297, 1301, 1305, 1309, 1312, 1447, 1463, 1479, 1494, 1510, 1525, 1540, 1553, 1571, 1587, 1603, 1618, 1634, 1649, 1679, 1974, 1990, 2005, 2020, 2036, 2082, 2098, 2113, 2129, 2144, 2160]
    var ILLBeYourManStrongBass = [0, 59, 324, 344, 356, 387, 404, 417, 449, 468, 480, 495, 511, 526, 542, 558, 697, 704, 712, 719, 727, 734, 742, 751, 759, 762, 766, 769, 773, 777, 781, 785, 790, 792, 793, 795, 797, 799, 800, 802, 804, 805, 820, 834, 839, 851, 865, 870, 882, 897, 901, 913, 927, 932, 943, 958, 963, 975, 989, 994, 1006, 1010, 1014, 1019, 1022, 1026, 1029, 1033, 1036, 1038, 1040, 1042, 1044, 1046, 1047, 1049, 1051, 1053, 1068, 1081, 1099, 1112, 1130, 1145, 1161, 1176, 1178, 1180, 1182, 1186, 1192, 1316, 1323, 1331, 1339, 1347, 1354, 1362, 1370, 1378, 1381, 1385, 1389, 1393, 1397, 1401, 1404, 1409, 1411, 1412, 1414, 1416, 1417, 1419, 1421, 1423, 1439, 1453, 1459, 1470, 1484, 1489, 1502, 1516, 1520, 1532, 1546, 1564, 1577, 1583, 1594, 1608, 1614, 1625, 1629, 1637, 1641, 1645, 1652, 1656, 1658, 1660, 1662, 1664, 1665, 1667, 1669, 1672, 1687, 1951, 1954, 1959, 1962, 1966, 1969, 1977, 1981, 1986, 1993, 1997, 2001, 2009, 2013, 2016, 2024, 2028, 2032, 2040, 2044, 2048, 2052, 2057, 2060, 2063, 2066, 2069, 2074, 2089, 2094, 2105, 2119, 2124, 2137, 2140, 2148, 2152, 2157, 2163, 2167, 2169, 2171, 2172, 2174, 2176, 2178, 2179, 2181, 2183, 2185, 2187, 2189]
    var ILLBeYourManrepeatedBass = [0, 0, 1557, 1561, 2194]
    
    
    var NOTTODAYweakBass = [0, 745, 756, 767, 777, 789, 800, 810, 821, 833, 843, 854, 865, 876, 887, 898, 909, 920, 931, 941, 951, 963, 974, 985, 996, 1007, 1028, 1051, 1062, 1442, 1446, 1451, 1457, 1462, 1467, 1473, 1477, 1484, 1490, 1495, 1500, 1506, 1511, 1516, 1522, 1528, 1533, 1539, 1544, 1549, 1554, 1560, 1564, 1570, 1576, 1582, 1587, 1593, 1598, 1618, 1629, 1640, 1650, 1661, 1673, 1683, 1694, 1705, 1716, 1726, 1738, 1874, 1879, 1885, 1890, 1896, 1901, 1906, 1912, 1965, 1970, 1976, 1981, 1987, 1990, 1997, 2001, 2008, 2013, 2019, 2023, 2030, 2035, 2041, 2044, 2052, 2057, 2063, 2066, 2074, 2079, 2085, 2090, 2096, 2101, 2106, 2111, 2139, 2145, 2150, 2156, 2162, 2166, 2173, 2183, 2188, 2195, 2206, 2210, 2216, 2219, 2227, 2232, 2238, 2243, 2249, 2253, 2259, 2264, 2271, 2276, 2281, 2286, 2400, 2406, 2412, 2417, 2422, 2427, 2432, 2437, 2489, 2494, 2500, 2503, 2511, 2514, 2521, 2525, 2532, 2537, 2543, 2548, 2554, 2560, 2565, 2569, 2576, 2581, 2587, 2592, 2598, 2603, 2609, 2614, 2620, 2625, 2630, 2635, 2835]
    var NOTTODAYStrongBass = [0, 652, 657, 663, 668, 674, 679, 685, 690, 695, 701, 706, 712, 717, 720, 723, 725, 729, 731, 734, 740, 747, 753, 761, 769, 774, 783, 791, 797, 805, 813, 818, 827, 835, 840, 849, 857, 861, 870, 879, 884, 892, 900, 905, 914, 922, 928, 936, 944, 948, 958, 966, 971, 980, 988, 993, 1001, 1009, 1023, 1032, 1044, 1053, 1059, 1067, 1072, 1078, 1085, 1176, 1181, 1187, 1192, 1197, 1203, 1208, 1213, 1219, 1225, 1231, 1236, 1241, 1243, 1246, 1248, 1250, 1253, 1255, 1257, 1258, 1264, 1269, 1274, 1279, 1284, 1289, 1294, 1301, 1306, 1311, 1316, 1322, 1327, 1333, 1338, 1344, 1350, 1355, 1361, 1366, 1372, 1377, 1382, 1388, 1393, 1398, 1403, 1409, 1415, 1421, 1426, 1438, 1444, 1448, 1454, 1459, 1464, 1469, 1475, 1481, 1487, 1492, 1497, 1503, 1508, 1514, 1519, 1525, 1530, 1536, 1541, 1546, 1552, 1557, 1562, 1567, 1573, 1578, 1584, 1589, 1595, 1601, 1613, 1621, 1625, 1634, 1642, 1647, 1656, 1664, 1669, 1678, 1685, 1690, 1700, 1707, 1713, 1721, 1729, 1734, 1742, 1757, 1765, 1770, 1776, 1787, 1831, 1917, 1922, 1928, 1933, 1939, 1942, 1944, 1947, 1950, 1953, 1955, 1961, 1967, 1973, 1978, 1983, 1988, 1994, 1999, 2005, 2010, 2015, 2021, 2027, 2032, 2038, 2043, 2048, 2054, 2060, 2065, 2070, 2075, 2081, 2086, 2092, 2097, 2103, 2108, 2114, 2122, 2136, 2141, 2147, 2152, 2158, 2163, 2169, 2174, 2180, 2185, 2191, 2196, 2202, 2207, 2213, 2217, 2223, 2228, 2234, 2239, 2245, 2250, 2256, 2261, 2267, 2272, 2278, 2283, 2288, 2311, 2355, 2398, 2403, 2409, 2414, 2419, 2424, 2429, 2434, 2440, 2446, 2452, 2457, 2463, 2466, 2468, 2471, 2473, 2475, 2476, 2478, 2480, 2481, 2485, 2491, 2496, 2501, 2507, 2512, 2518, 2523, 2529, 2534, 2539, 2545, 2550, 2556, 2562, 2567, 2572, 2578, 2583, 2588, 2594, 2599, 2605, 2610, 2616, 2621, 2627, 2631, 2639, 2643, 2648, 2659, 2665, 2670, 2676, 2682, 2687, 2692, 2697, 2702, 2708, 2713, 2719, 2725, 2730, 2736, 2741, 2747, 2752, 2757, 2762, 2768, 2773, 2778, 2784, 2790, 2796, 2801, 2806, 2812, 2818, 2823]
    var NOTTODAYrepeatedBass = [0]
    
    
    var REALLYREALLYweakBass = [0, 104, 116, 128, 139, 150, 163, 174, 197, 209, 221, 232, 244, 256, 267, 279, 290, 302, 313, 325, 337, 349, 361, 559, 571, 582, 594, 605, 617, 628, 640, 664, 675, 687, 698, 710, 722, 732, 737, 769, 780, 792, 804, 815, 826, 839, 850, 862, 873, 885, 896, 908, 920, 943, 954, 966, 978, 990, 1001, 1013, 1025, 1037, 1048, 1060, 1071, 1082, 1094, 1106, 1158, 1328, 1340, 1351, 1362, 1374, 1385, 1397, 1409, 1421, 1432, 1444, 1455, 1467, 1479, 1491, 1503, 1526, 1537, 1549, 1561, 1572, 1583, 1595, 1608, 1726, 1735, 1746, 1759, 1770, 1782, 1794, 1805, 1817, 1829, 1841, 1852, 1863, 1875, 1887, 1896, 1902]
    var REALLYREALLYStrongBass = [0, 98, 110, 122, 134, 145, 156, 168, 191, 203, 214, 227, 239, 250, 261, 273, 285, 296, 308, 319, 331, 343, 355, 378, 413, 419, 459, 465, 471, 476, 477, 481, 484, 488, 492, 494, 499, 501, 504, 512, 515, 518, 521, 524, 526, 529, 531, 534, 536, 565, 571, 576, 588, 600, 610, 623, 634, 658, 669, 681, 692, 704, 716, 728, 774, 785, 798, 809, 821, 832, 844, 856, 867, 879, 891, 902, 914, 937, 948, 972, 984, 995, 1007, 1019, 1031, 1042, 1054, 1066, 1076, 1088, 1100, 1124, 1164, 1206, 1211, 1217, 1221, 1223, 1228, 1233, 1235, 1238, 1241, 1245, 1247, 1250, 1258, 1263, 1266, 1268, 1271, 1274, 1276, 1277, 1279, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1292, 1294, 1295, 1297, 1298, 1300, 1301, 1303, 1305, 1306, 1308, 1308, 1310, 1334, 1345, 1357, 1368, 1380, 1391, 1403, 1415, 1426, 1438, 1450, 1462, 1473, 1483, 1497, 1613, 1619, 1624, 1626, 1630, 1637, 1642, 1648, 1653, 1660, 1671, 1730, 1740, 1753, 1764, 1776, 1787, 1799, 1811, 1822, 1834, 1846, 1858, 1869, 1881, 1893]
    var REALLYREALLYrepeatedBass = [0]
    
    
    var PLAYINGWITHFIREweakBass = [0, 120, 132, 145, 157, 169, 182, 194, 207, 220, 232, 244, 256, 269, 281, 293, 305, 318, 330, 343, 355, 368, 380, 392, 404, 417, 429, 442, 454, 466, 479, 491, 504, 516, 528, 541, 553, 615, 628, 640, 652, 665, 677, 689, 702, 715, 727, 739, 751, 764, 776, 789, 801, 902, 913, 1024, 1036, 1048, 1060, 1073, 1098, 1110, 1122, 1134, 1147, 1159, 1172, 1196, 1208, 1221, 1234, 1246, 1258, 1271, 1308, 1320, 1332, 1345, 1358, 1370, 1382, 1394, 1407, 1419, 1432, 1444, 1457, 1469, 1481, 1493, 1728, 1741, 1753, 1766, 1778, 1791, 1803, 1815, 1828, 1840, 1852, 1864, 1877, 1889, 1902, 1914]
    var PLAYINGWITHFIREStrongBass = [0, 110, 115, 126, 138, 151, 163, 175, 188, 200, 213, 225, 238, 250, 262, 275, 287, 299, 312, 324, 337, 349, 361, 374, 411, 423, 436, 448, 460, 472, 484, 497, 510, 522, 535, 547, 565, 577, 609, 621, 634, 646, 658, 671, 683, 696, 708, 720, 733, 745, 757, 770, 782, 794, 807, 832, 838, 844, 850, 857, 862, 868, 874, 881, 887, 893, 906, 1005, 1011, 1017, 1030, 1042, 1055, 1067, 1104, 1116, 1128, 1141, 1153, 1165, 1177, 1202, 1215, 1228, 1240, 1301, 1314, 1327, 1339, 1351, 1363, 1376, 1388, 1400, 1413, 1425, 1438, 1450, 1463, 1475, 1487, 1499, 1506, 1512, 1518, 1524, 1530, 1536, 1543, 1549, 1556, 1561, 1568, 1574, 1580, 1586, 1592, 1598, 1604, 1611, 1617, 1623, 1629, 1636, 1642, 1648, 1654, 1660, 1667, 1672, 1676, 1679, 1682, 1685, 1690, 1722, 1734, 1747, 1760, 1772, 1784, 1797, 1809, 1822, 1834, 1846, 1858, 1871, 1883, 1896, 1907]
    var PLAYINGWITHFIRErepeatedBass = [0, 1184]
    
    
    func playTheTaptic() {
        counter += 1
        
        playTaptics(repeatedBass: LittleThingsrepetitionBass, strongBass: LittleThingsMusicStrongBass, weakBass: LittleThingsMusicWeakBass, musicName: "The Little Things")

        playTaptics(repeatedBass: WhislteRepeatedBass, strongBass: WhislteStrongBass, weakBass: WhistleWeakBass, musicName: "WHISTLE")
        playTaptics(repeatedBass: OOHAHHRepeatedBass, strongBass: OOHAHHStrongBass, weakBass: OHHAHHWeakBass, musicName: "OOH-AHH")
        playTaptics(repeatedBass: KNOCKKNOCKRepeaetedBass, strongBass: KNOCKKNOCKStrongBass, weakBass: KNOCKKNOCKWeakBass, musicName: "KNOCK KNOCK")
        playTaptics(repeatedBass: backForthrepeatedBass, strongBass: backForthStrongBass, weakBass: backForthWeakBass, musicName: "Back & Forth")
        playTaptics(repeatedBass: theFightDayRepeatedBass, strongBass: theFightDayStrongBass, weakBass: theFightDayWeakBass, musicName: "싸운날")
        playTaptics(repeatedBass: springDayRepeatedBass, strongBass: springDayStrongBass, weakBass: springDayWeakBass, musicName: "Spring Day")
        playTaptics(repeatedBass: ToKyoGirlRepeteadBass, strongBass: ToKyoGirlStrongBass, weakBass: ToKyoGirlWeakBass, musicName: "TOKYO GIRL")
        
        playTaptics(repeatedBass: INEEDYOUrepeatedBass, strongBass: INEEDYOUStrongBass, weakBass: INEEDYOUweakBass, musicName: "I NEED U")
        playTaptics(repeatedBass: PuzzleRepeatedBass, strongBass: PuzzleStrongBass, weakBass: PuzzleWeakBass, musicName: "Puzzle")
        
        playTaptics(repeatedBass: ILLBeYourManrepeatedBass, strongBass: ILLBeYourManStrongBass, weakBass: ILLBeYourManweakBass, musicName: "I'll be your man")
        
        playTaptics(repeatedBass: REALLYREALLYrepeatedBass, strongBass: REALLYREALLYStrongBass, weakBass: REALLYREALLYweakBass, musicName: "REALLY REALLY")
        playTaptics(repeatedBass: PLAYINGWITHFIRErepeatedBass, strongBass: PLAYINGWITHFIREStrongBass, weakBass: PLAYINGWITHFIREweakBass, musicName: "PLAYING WITH FIRE")
        playTaptics(repeatedBass: NOTTODAYrepeatedBass, strongBass: NOTTODAYStrongBass, weakBass: NOTTODAYweakBass, musicName: "Not Today")
        
        
        
        if counter == 2500 {
            
            counter = 0
            timer.invalidate()
            
            
        }
        
    }
    
    
    func playTaptics(repeatedBass: Array<Int>, strongBass:  Array<Int>, weakBass:  Array<Int>, musicName: String) {
        
        if musicTitle.text == musicName {
            
            if counter == 1 {
                
                RunLoop.main.add(timer, forMode: RunLoopMode.commonModes)
                
            }
            
            for strongBassIndicator in strongBass {
                
                if playOnWatch.isOn == false {
                    if counter == strongBassIndicator - (Int(offSetUserValue.value) - 1)  {
                        
                        
                        
                        AudioServicesPlaySystemSound(1520)
                        
                    }
                    
                } else if playOnWatch.isOn == true {
                    
                    if counter == strongBassIndicator - (Int(offSetUserValue.value) - 1) {
                        
                        if (WCSession.default.isReachable) {
                            
                            
                            let requestValues = ["command" : "StrongBass"]
                            WCSession.default.sendMessage(requestValues, replyHandler: nil, errorHandler: nil)
                            
                        }
                        
                    }
                    
                }
            }
            
            
            
            for weakBassIndicator in weakBass {
                
                if playOnWatch.isOn == false {
                    
                    if counter == weakBassIndicator - (Int(offSetUserValue.value) - 1) {
                        AudioServicesPlaySystemSound(1519)
                        
                    }
                    
                    
                } else if playOnWatch.isOn == true {
                    
                    if counter == weakBassIndicator - (Int(offSetUserValue.value) - 1) {
                        
                        if (WCSession.default.isReachable) {
                            
                            let requestValues = ["command" : "WeakBass"]
                            
                            WCSession.default.sendMessage(requestValues, replyHandler: nil, errorHandler: nil)
                            
                            
                        }
                        
                    }
                    
                }
                
            }
            
            for fastBass in repeatedBass {
                
                if playOnWatch.isOn == false {
                    
                    if counter == fastBass - (Int(offSetUserValue.value) - 1) {
                        AudioServicesPlaySystemSound(1521)
                    }
                    
                } else if playOnWatch.isOn == true {
                    
                    if counter == fastBass - (Int(offSetUserValue.value) - 2) {
                        let requestValues = ["command" : "RepeatedBass"]
                        
                        WCSession.default.sendMessage(requestValues, replyHandler: nil, errorHandler: nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }

    @IBAction func sliderDidChange() {
        
        if offSetUserValue.value < -1 {
            
            offSetUserValue.value = -2
            
        } else if offSetUserValue.value < 0 {
            offSetUserValue.value = -1
            
        }else if offSetUserValue.value < 1 {
            offSetUserValue.value = 0
        } else if offSetUserValue.value < 2 {
            offSetUserValue.value = 1
        } else if offSetUserValue.value < 3 {
            offSetUserValue.value = 2
        } else if offSetUserValue.value < 4 {
            offSetUserValue.value = 3
            
        } else if offSetUserValue.value < 5 {
            offSetUserValue.value = 4
        } else if offSetUserValue.value == 5 {
            offSetUserValue.value = 5
        }
        
        if offSetUserValue.isContinuous == true {
            AudioServicesPlaySystemSound(1521)
            
            
        }
        
    }
    @IBAction func showAPpleWatchOption() {
        
        if appleWatchOptionView.alpha == 0 {
            
            UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
                self.appleWatchOptionView.alpha = 1
                self.appleWatchOptionView.transform = CGAffineTransform.init(translationX: 0, y: 0)
            }, completion: nil)
            
            
            
        } else if appleWatchOptionView.alpha == 1 {
            
            UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
                self.appleWatchOptionView.alpha = 0
                self.appleWatchOptionView.transform = CGAffineTransform.init(translationX: 0, y: 300)
                
            }, completion: nil)
        }
        
        
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // Getting the right element
        let element = elements[indexPath.row]
        let albumArtElement = availableMusicArtist[indexPath.row]
        // Instantiate a cell
        
        
        
        let musicCells = tableView.dequeueReusableCell(withIdentifier: "musicCell", for: indexPath) as! musicTableViewCell
        let cellImageLayer: CALayer?  = musicCells.musicAlbumArtTableViewImage.layer
        
        musicCells.musicTitleTableViewLabel.text = element
        musicCells.musicAlbumArtTableViewLabel.text = albumArtElement
        musicCells.musicAlbumArtTableViewImage.image = UIImage(named: availableAlbumArtImage[indexPath.row])
        musicCells.musicAlbumArtTableViewImageBackground.image = UIImage(named: availableAlbumArtImage[indexPath.row])
        
        cellImageLayer!.masksToBounds = true
        cellImageLayer!.cornerRadius = 5
        musicCells.musicAlbumArtTableViewImage.clipsToBounds = true
        
        
        
        musicCells.musicAlbumArtTableViewImage.layer.cornerRadius = 5
        
        // Returning the cell
        return musicCells
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        playerWebView.allowsInlineMediaPlayback = true
        playerWebView.mediaPlaybackRequiresUserAction = false

        musicTitle.text = elements[indexPath.row]
        albumArtName.text = availableMusicArtist[indexPath.row]
        miniPlayerMusicTitle.text = elements[indexPath.row]
        miniPlayerAlbumArtName.text = availableMusicArtist[indexPath.row]
        albumArt.image = UIImage(named:"\(availableAlbumArtImage[indexPath.row])")
        backgroundAlbumArt.image = UIImage(named:"\(availableAlbumArtImage[indexPath.row])")
        
        NotificationCenter.default.addObserver(self, selector: #selector(playNow), name: NSNotification.Name.AVPlayerItemNewAccessLogEntry , object: nil)
        
        let embededHTML = "<html><body style='margin:0px;padding:0px;'><script type='text/javascript' src='https://www.youtube.com/iframe_api'></script><script type='text/javascript'>function onYouTubeIframeAPIReady(){ytplayer=new YT.Player('playerId',{events:{onReady:onPlayerReady}})}function onPlayerReady(a){a.target.playVideo();}</script><iframe id='playerId' type='text/html' width='\(self.view.frame.size.width)' height='\(162)' src='https://www.youtube.com/embed/\(availableTapticMusics[indexPath.row])?enablejsapi=1&rel=0&playsinline=1&autoplay=1' frameborder='0'></body></html>"
        
        tableView.contentOffset.y = 0
        playerWebView.loadHTMLString(embededHTML, baseURL: Bundle.main.resourceURL)

        playerWebView.delegate = self
       // playerWebView.frame.height =  200
        changeToMaxPlayerView()
       // playerWebView.frame.size.height = 200

    }
    
    @objc func playNow() {
        counter = 0
        
        timer.invalidate()
        RunLoop.cancelPreviousPerformRequests(withTarget: timer)
        print("yes")
        NotificationCenter.default.removeObserver(NSNotification.Name.AVPlayerItemNewAccessLogEntry)
        timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(ViewController.playTheTaptic), userInfo: nil, repeats: true)
        
    }

    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
        
        if  scrollView == tableView {
        if (scrollView.contentOffset.y <= -84.6) {
            
            changeToMaxPlayerView()
            
        }
    }
        
        
    }

    
    
    func changeToMiniPlayerView() {
        
        self.albumMiniArtWidth.constant = 51
        self.albumMiniArtHeight.constant = 51
        self.albumMiniArtTopConstraint.constant = 28
        
        self.pausePlayButtonWidth.constant = 51
        self.pausePlayButtonHeight.constant = 51
        self.pausePlayButtonTopConstraint.constant =  28
        
        self.musicLittleControllerViewHeight.constant = 90
        
        
        self.view.setNeedsUpdateConstraints()
        self.albumArt.layer.cornerRadius = 5
        
        self.albumArt.clipsToBounds = true
        //playMusicView.allowsInlineMediaPlayback = true
        //playMusicView.mediaPlaybackRequiresUserAction = false
        
        
        UIView.animate(withDuration: 0.75, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
            
            
            self.view.layoutIfNeeded()
            
        }, completion: nil)
        
        UIView.animate(withDuration: 0.3, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
            self.musicTitle.transform  = CGAffineTransform.init(translationX: 0, y: 100)
            self.offSetUserValue.transform  = CGAffineTransform.init(translationX: 0, y: 200)
            self.albumArtName.transform  = CGAffineTransform.init(translationX: 0, y: 100)
            self.playOnWatchButton.transform = CGAffineTransform.init(translationX: 0, y: 200)
            self.appleWatchOptionView.alpha = 0
            self.appleWatchOptionView.transform = CGAffineTransform.init(translationX: 0, y: 300)
            self.musicTitle.alpha = 0
            self.offSetUserValue.alpha = 0
            self.albumArtName.alpha = 0
            
            
        }, completion: nil)
        
        UIView.animate(withDuration: 0.3, animations: {
            //self.musicTitle.alpha = 0
            self.miniPlayerMusicTitle.alpha  = 1
            self.miniPlayerAlbumArtName.alpha = 1
            self.offSetUserValue.alpha = 0
            self.playOnWatchButton.alpha = 0
        })
        
        
    }
    
    
    
    func changeToMaxPlayerView() {
        tableView.contentOffset.y = 0
        //tableView.scrollView.contentOffset.y = 0
        
        
        //webView.allowsInlineMediaPlayback = true
        //webView.mediaPlaybackRequiresUserAction = false
        
       // print("\(currentMusic!).jpg")
        //self.albumArt.image = UIImage(named: "\(currentMusic!).jpg")
        //self.backgroundAlbumArt.image = UIImage(named: "\(currentMusic!).jpg")
        self.albumMiniArtWidth.constant = UIScreen.main.bounds.width - 60
        self.albumMiniArtHeight.constant = UIScreen.main.bounds.width - 60
        self.musicLittleControllerViewHeight.constant = UIScreen.main.bounds.height - 162
        
        self.pausePlayButtonWidth.constant =  UIScreen.main.bounds.width - 60
        self.pausePlayButtonHeight.constant =  UIScreen.main.bounds.width - 60
        self.pausePlayButtonTopConstraint.constant =  28
        
        self.albumMiniArtTopConstraint.constant = 28
        self.albumArt.layer.cornerRadius = 10
        
        self.view.setNeedsUpdateConstraints()
        self.albumArt.clipsToBounds = true
        //view.sendSubview(toBack: playMusicView)
        UIView.animate(withDuration: 0.75, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
            
            
            self.view.layoutIfNeeded()
            
        }, completion: nil)
        
        UIView.animate(withDuration: 0.75, delay: 0.2, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
            self.musicTitle.transform  = CGAffineTransform.init(translationX: 0, y: 0)
            self.offSetUserValue.transform  = CGAffineTransform.init(translationX: 0, y: 0)
            self.albumArtName.transform  = CGAffineTransform.init(translationX: 0, y: 0)
            self.playOnWatchButton.transform = CGAffineTransform.init(translationX: 0, y: 0)
            
            self.musicTitle.alpha = 1
            self.offSetUserValue.alpha = 1
            self.albumArtName.alpha = 1
            
        }, completion: nil)
        
        UIView.animate(withDuration: 0.75, animations: {
            self.musicTitle.alpha = 1
            self.miniPlayerMusicTitle.alpha  = 0
            self.miniPlayerAlbumArtName.alpha = 0
            self.offSetUserValue.alpha = 1
            self.playOnWatchButton.alpha = 1
        })
        
        
        
    }
    
    var timerRecordedPause = 0
    
    @IBAction func changeTheViewBlurEffect() {
        
        if playOnWatch.isOn == true {
            backgroundMusicBlur.effect =  UIBlurEffect(style: .dark)
            
            UIView.animate(withDuration: 0.5, animations: {
                self.musicTitle.textColor = UIColor.white
                self.albumArtName.textColor = UIColor.white
                self.miniPlayerMusicTitle.textColor = UIColor.white
                self.miniPlayerAlbumArtName.textColor = UIColor.white
                
            })
            
            
        } else if playOnWatch.isOn == false {
            backgroundMusicBlur.effect =  UIBlurEffect(style: .light)
            
            UIView.animate(withDuration: 0.5, animations: {
                self.musicTitle.textColor = UIColor.black
                self.albumArtName.textColor = UIColor.black
                self.miniPlayerMusicTitle.textColor = UIColor.black
                self.miniPlayerAlbumArtName.textColor = UIColor.black
                
                
            })
            
        }
        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseInOut, animations: {
            self.appleWatchOptionView.alpha = 0
            self.appleWatchOptionView.transform = CGAffineTransform.init(translationX: 0, y: 300)
        }, completion: nil)
    }
    
    var playing = true
    
    var counterSavedValue = 0

    @IBAction func playNowButton() {
       timer = Timer.scheduledTimer(timeInterval: 0.2, target: self, selector: #selector(ViewController.playTheTaptic), userInfo: nil, repeats: true)
    playerWebView.stringByEvaluatingJavaScript(from: "ytplayer.playVideo()")
 
        counter = counterSavedValue + 5
        
        
    print("Playing")
        print(counter)
    playing = true
        
    }
    
    @IBAction func playOrPauseButton() {
        

            playerWebView.stringByEvaluatingJavaScript(from: "ytplayer.pauseVideo()")
            counterSavedValue = counter
            timerRecordedPause = Int(timer.timeInterval)
            counter = 0

            print("Playing")
            playing = false
            
            timer.invalidate()
       

        
        
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        let touch = touches.first as UITouch?
        
        
        if touch?.view == musicLittleControllerView {
            AudioServicesPlaySystemSound(1520)
            
            if albumMiniArtHeight.constant < 300 {
                changeToMaxPlayerView()
                
            } else if albumMiniArtHeight.constant == UIScreen.main.bounds.width - 60 {
                
                changeToMiniPlayerView()
                
                
            }
        }
        
        
    }
    func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
        
    }
    
    func sessionDidBecomeInactive(_ session: WCSession) {
        
    }
    
    func sessionDidDeactivate(_ session: WCSession) {
        
    }
    
    
}
